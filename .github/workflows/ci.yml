name: Update Submodules

on:
  push:
    paths:
      - 'front/**'
      - 'back/**'

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Update submodules
        run: git submodule update --remote

      - name: Commit and Push changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add front
          git add back
          git diff --cached --quiet || git commit -m "Auto-update submodule"
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git push origin main
          fi
        if: success()

# name: CI/CD Workflow

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   test-backend:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
        
#       - name: Set up Node.js for backend
#         uses: actions/setup-node@v2
#         with:
#           node-version: 'latest'

#       - name: Install backend dependencies
#         run: cd backend && npm install

#       - name: Run backend tests
#         run: cd backend && npm test

#   test-frontend:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
  
#       - name: Set up Node.js for frontend
#         uses: actions/setup-node@v2
#         with:
#           node-version: 'latest'
  
#       - name: Install frontend dependencies
#         run: cd frontend && npm install
  
#       - name: Run frontend tests
#         run: cd frontend && npm test

#   build-and-push:
#     runs-on: ubuntu-latest
#     needs:
#       test-backend
#       test-frontend

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#       - name: Build the Docker image
#         run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest .

#       - name: Push the Docker image
#         run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Deploy to DigitalOcean Droplet via SSH
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.DROPLET_HOST }}
#           username: ${{ secrets.DROPLET_USER }}
#           key: ${{ secrets.DROPLET_SSH_KEY }}
#           script: |
#             docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
#             cd /path/to/your/docker-compose/file
#             docker-compose down
#             docker-compose up -d